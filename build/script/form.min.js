!function() {
    "use strict";
    function deleteLastTraveler(index) {
        if (index > MIN_OF_TRAVELERS) {
            var removedTraveler = document.querySelector("#traveler-" + index);
            area.removeChild(removedTraveler);
        }
    }
    function addTravelers(index) {
        var templateElement = document.querySelector("#traveler-template"), template = templateElement.innerHTML, html = Mustache.render(template, {
            number: index
        }), newTraveler = document.createElement("div");
        newTraveler.classList.add("traveler"), 
        newTraveler.id = "traveler-" + index, 
        newTraveler.innerHTML = html, 
        area.appendChild(newTraveler);
    }
    function changeTravelers(input, index, btnClass) {
        var parent = input.parentElement;
        parent.classList.contains("review__field-group--travelers") && ("btn--add" === btnClass && (addTravelers(index), 
        delBtns = document.querySelector("#del-traveler-" + index), 
        delBtns.addEventListener("click", deleteRandonTraveler())), 
        "btn--reduce" === btnClass && deleteLastTraveler(index));
    }
    function units(input) {
        return input.dataset.units;
    }
    function maxValue(unit) {
        switch (unit) {
          case "чел.":
            return MAX_OF_TRAVELERS;

          case "дн.":
            return MAX_DAYS;

          default:
            return "";
        }
    }
    function reduce() {
        return function() {
            var parent = this.parentElement, input = parent.querySelector(".review__input"), oldValue = parseInt(input.value), newValue = oldValue - 1, count = MIN_OF_TRAVELERS > newValue ? MIN_OF_TRAVELERS : newValue;
            input.value = count + " " + units(input), 
            changeTravelers(input, oldValue, "btn--reduce");
        };
    }
    function replaceIndexes(elem) {
        var postfix = elem.id.substring("traveler-".length), tmpl = elem.innerHTML, newPostfix = parseInt(postfix) - 1, rexp = new RegExp(postfix + '"', "gm"), newTmpl = tmpl.replace(rexp, newPostfix + '"'), travelerName = elem.querySelector("#traveler-name-" + postfix).value, travelerNick = elem.querySelector("#traveler-nick-" + postfix).value;
        elem.innerHTML = newTmpl, 
        elem.querySelector("#traveler-name-" + newPostfix).value = travelerName, 
        elem.querySelector("#traveler-nick-" + newPostfix).value = travelerNick, 
        elem.id = "traveler-" + newPostfix;
        var delBtns = document.querySelector("#del-traveler-" + newPostfix);
        delBtns.addEventListener("click", deleteRandonTraveler());
    }
    function updateIndexes(postfix) {
        var travelerCount = document.querySelector("#travelers"), oldValue = parseInt(travelerCount.value), newValue = oldValue - 1, count = MIN_OF_TRAVELERS > newValue ? MIN_OF_TRAVELERS : newValue;
        travelerCount.value = count + " " + units(travelerCount);
        for (var index = postfix - 2, travelers = document.getElementsByClassName("traveler"), i = index; i < travelers.length; i++) replaceIndexes(travelers[i]);
    }
    function deleteRandonTraveler() {
        return function() {
            var postfix = this.id.substring("del-traveler-".length), removedTraveler = document.querySelector("#traveler-" + postfix);
            area.removeChild(removedTraveler);
            var startPostfix = parseInt(postfix) + 1;
            updateIndexes(startPostfix);
        };
    }
    function add() {
        return function() {
            var parent = this.parentElement, input = parent.querySelector(".review__input"), count = parseInt(input.value) + 1, max = maxValue(units(input));
            count = max > count ? count : max, 
            input.value = count + " " + units(input), 
            changeTravelers(input, count, "btn--add");
        };
    }
    for (var MAX_OF_TRAVELERS = 10, MIN_OF_TRAVELERS = 0, MAX_DAYS = 100, area = document.querySelector(".review-fldset--travelers"), reduceBtns = (document.querySelector("#traveler-template"), 
    document.getElementsByClassName("btn--reduce")), i = 0; i < reduceBtns.length; i++) reduceBtns[i].addEventListener("click", reduce());
    for (var addBtns = document.getElementsByClassName("btn--add"), i = 0; i < addBtns.length; i++) addBtns[i].addEventListener("click", add());
    for (var delBtns = document.getElementsByClassName("del-traveler"), i = 0; i < delBtns.length; i++) delBtns[i].addEventListener("click", deleteRandonTraveler());
}(), 
function() {
    "use strict";
    function setEndDate() {
        var beginDate = this.getMoment(), duration = parseInt(document.getElementById("duration").value), momentDuration = moment.duration(duration, "d"), endDuration = beginDate.add(momentDuration);
        document.getElementById("end-journey").value = endDuration.format("Do MMMM YYYY");
    }
    moment.locale("ru");
    new Pikaday({
        field: document.getElementById("begin-journey"),
        firstDay: 1,
        minDate: new Date(2e3, 0, 1),
        maxDate: new Date(2020, 12, 31),
        yearRange: [ 2e3, 2020 ],
        format: "Do MMMM YYYY",
        i18n: {
            previousMonth: "Пред. мес.",
            nextMonth: "След. мес.",
            months: [ "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь" ],
            weekdays: [ "Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота" ],
            weekdaysShort: [ "Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб" ]
        },
        onSelect: function() {
            setEndDate(this);
        }
    });
}(), 
function() {
    function preview(file) {
        if (file.type.match(/image.*/)) {
            var reader = new FileReader();
            reader.addEventListener("load", function(event) {
                var html = Mustache.render(template, {
                    src: event.target.result,
                    "photo-name": file.name
                }), div = document.createElement("div");
                div.classList.add("recall-form__loaded-photo"), 
                div.innerHTML = html, 
                gallery.appendChild(div), 
                queue.push({
                    file: file,
                    div: div
                }), 
                div.querySelector(".recall-form__delete-photo").addEventListener("click", function(event) {
                    event.preventDefault(), 
                    removePreview(div);
                });
            }), 
            reader.readAsDataURL(file);
        }
    }
    function removePreview(div) {
        queue = queue.filter(function(element) {
            return element.div != div;
        }), 
        div.parentNode.removeChild(div);
    }
    function request(data, fn) {
        var xhr = new XMLHttpRequest(), time = new Date().getTime();
        xhr.open("post", "https://echo.htmlacademy.ru/adaptive?" + time), 
        xhr.addEventListener("readystatechange", function() {
            4 == xhr.readyState && fn(xhr.responseText);
        }), 
        xhr.send(data);
    }
    if ("FormData" in window) {
        var form = document.querySelector(".recall-form");
        if (form) {
            var queue = [], template = document.querySelector("#photo-template").innerHTML;
            if ("FileReader" in window) {
                var gallery = document.querySelector(".recall-form__gallery");
                form.querySelector("#upload-photo").addEventListener("change", function() {
                    for (var files = this.files, i = 0; i < files.length; i++) preview(files[i]);
                    this.value = "";
                });
            }
            form.addEventListener("submit", function(event) {
                event.preventDefault();
                var data = new FormData(form);
                queue.forEach(function(element) {
                    data.append("images", element.file);
                }), 
                request(data, function(response) {
                    console.log(response);
                });
            });
        }
    }
}();